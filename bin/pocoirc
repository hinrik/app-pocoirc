#!/usr/bin/env perl

use strict;
use warnings;
use App::Pocoirc;
use Getopt::Long qw(:config autohelp);
use Pod::Usage;
use JSON qw(decode_json);
use YAML::XS qw(LoadFile);

my %args;
GetOptions(
    'c|config=s'   => \$args{cfg_file},
    'v|verbose'    => \$args{verbose},
    '6|ipv6'       => \$args{ipv6},
    'S|ssl'        => \$args{ssl},
    'q|qnet'       => \$args{qnet},
    's|server=s'   => \$args{server},
    'n|nickname=s' => \$args{nickname},
    'u|username=s' => \$args{username},
    'i|realname=s' => \$args{realname},
    'p|plugin=s@'  => \$args{plugin_specs},
) or pod2usage();

my @plugins;
for my $plugspec (@{ $args{plugin_specs} }) {
    my ($name, $json) = $plugspec =~ /^([A-Za-z0-9]+)\s*(.+)?/;
    die "Missing plugin name for option --plugin\n" if !defined $name;

    my $plug_args;
    if (defined $json) {
        eval { $plug_args = decode_json($json) };
        if ($@) {
            chomp $@;
            die "Invalid JSON argument for plugin $name: $@\n"
        }
        if (ref $plug_args ne 'HASH') {
            die "JSON argument for plugin $name should be an array\n";
        }
    }

    push @plugins, [$name, defined $plug_args ? $plug_args : {}];
}

my $config;
if (defined $args{cfg_file}) {
    eval { $config = LoadFile($args{cfg_file}) };

    if ($@) {
        chomp $@;
        die "Invalid YAML in $args{cfg_file}: $@\n"
    }
    if (ref $config ne 'HASH') {
        die "YAML data in $args{cfg_file} should be an hash\n";
    }
}
else {
    $config = {
        networks => {
            default => {
                server   => $args{server},
                ipv6     => $args{ipv6},
                ssl      => $args{ssl},
                qnet     => $args{qnet},
                nickname => $args{nickname},
                username => $args{username},
                realname => $args{realname},
                plugins  => \@plugins,
            }
        },
    };
}

App::Pocoirc->new(
    config  => %$config,
    verbose => $args{verbose},
)->run();

=encoding utf8

=head1 NAME

pocoirc - A command line tool for launching
L<POE::Component::IRC|POE::Component::IRC> clients

=head1 SYNOPSIS

B<pocoirc> <options>

 Options:
   -c FOO, --config FOO         Use config file FOO
   -d, --debug                  Show IRC protocol lines
   -v, --version                Print version
   -h, --help                   Print this usage message

 When not using a config file, you can use these:
   -s FOO, --server FOO         Connect to server FOO
   -n FOO, --nickname FOO       Use nickname FOO
   -u FOO, --username FOO       Use username FOO
   -i FOO, --realname FOO        Use realname FOO
   -p PLUGIN, --plugin PLUGIN   Load plugin PLUGIN (see below)
   -6, --ipv6,                  Use IPv6
   -S, --ssl,                   Use SSL
   -q, --qnet                   Use POE::Component::IRC::Qnet::State

 PLUGIN mentioned above should consist of the plugin name, zero or more
 whitespace, and possibly a JSON hash of arguments to the plugin's
 constructor:

  -p AutoJoin
  -p 'AutoJoin{"ReJoinOnKick":0}'
  -p 'AutoJoin{"ReJoinOnKick":0,"Channels":["#foo","#bar"]}'
  -p 'AutoJoin {"ReJoinOnKick": 0, "Channels": ["#foo", "#bar"]}'

=head1 AUTHOR

Hinrik E<Ouml>rn SigurE<eth>sson, hinrik.sig@gmail.com

=head1 LICENSE AND COPYRIGHT

Copyright 2010 Hinrik E<Ouml>rn SigurE<eth>sson

This program is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
